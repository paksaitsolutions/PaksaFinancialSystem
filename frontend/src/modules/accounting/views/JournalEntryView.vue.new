<template>
  <div class="journal-entry-view p-4">
    <div class="card">
      <template #header>
        <div class="flex justify-content-between align-items-center">
          <h2>Journal Entries</h2>
          <Button 
            label="New Entry" 
            icon="pi pi-plus" 
            @click="handleNewEntry"
            class="p-button-sm"
          />
        </div>
      </template>
      
      <div class="p-datatable-wrapper">
        <DataTable 
          :value="journalEntries" 
          :loading="loading"
          :paginator="true"
          :rows="10"
          :rowsPerPageOptions="[5, 10, 20, 50]"
          paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
          currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
          stripedRows
        >
          <Column field="reference" header="Reference" sortable>
            <template #body="{ data }">
              {{ data.reference || '-' }}
            </template>
          </Column>
          <Column field="date" header="Date" sortable>
            <template #body="{ data }">
              {{ formatDate(data.date) }}
            </template>
          </Column>
          <Column field="memo" header="Memo" sortable />
          <Column field="status" header="Status" sortable>
            <template #body="{ data }">
              <Tag :value="data.status" :severity="getStatusSeverity(data.status)" />
            </template>
          </Column>
          <Column field="total_amount" header="Amount" sortable>
            <template #body="{ data }">
              {{ formatCurrency(data.total_amount || 0) }}
            </template>
          </Column>
          <Column header="Actions" style="width: 10rem">
            <template #body="{ data }">
              <Button 
                icon="pi pi-pencil" 
                class="p-button-text p-button-sm" 
                @click="editEntry(data)" 
              />
              <Button 
                icon="pi pi-trash" 
                class="p-button-text p-button-sm p-button-danger" 
                @click="confirmDelete(data)" 
              />
            </template>
          </Column>
        </DataTable>
      </div>
    </div>

    <!-- Journal Entry Dialog -->
    <Dialog 
      v-model:visible="journalDialog" 
      :header="editingEntry ? 'Edit Journal Entry' : 'New Journal Entry'" 
      :modal="true" 
      :style="{ width: '800px' }"
      :closable="!loading" 
      :close-on-escape="!loading"
    >
      <div class="p-fluid">
        <div class="grid">
          <div class="col-12 md:col-4">
            <div class="field">
              <label for="reference">Reference #</label>
              <InputText 
                id="reference"
                v-model="editedEntry.reference" 
                placeholder="Reference" 
                class="w-full"
              />
            </div>
          </div>
          <div class="col-12 md:col-4">
            <div class="field">
              <label for="date">Date</label>
              <Calendar 
                id="date" 
                v-model="editedEntry.date" 
                date-format="yy-mm-dd" 
                show-icon 
                class="w-full"
              />
            </div>
          </div>
          <div class="col-12 md:col-4">
            <div class="field">
              <label for="status">Status</label>
              <Dropdown 
                id="status" 
                v-model="editedEntry.status" 
                :options="statusOptions" 
                option-label="label"
                option-value="value"
                :disabled="editingEntry"
                class="w-full"
              />
            </div>
          </div>
          <div class="col-12">
            <div class="field">
              <label for="memo">Memo</label>
              <Textarea 
                id="memo" 
                v-model="editedEntry.memo" 
                :rows="2" 
                :readonly="editingEntry"
                class="w-full"
              />
            </div>
          </div>
        </div>

        <Divider />

        <div v-for="(line, index) in editedEntry.lines" :key="index" class="mb-3 p-3 border-1 border-round">
          <div class="grid">
            <div class="col-12 md:col-6">
              <div class="field">
                <Dropdown
                  v-model="line.account_id"
                  :options="accounts"
                  option-label="name"
                  option-value="id"
                  placeholder="Select Account"
                  class="w-full"
                />
              </div>
            </div>
            <div class="col-12 md:col-3">
              <div class="field">
                <InputNumber 
                  v-model.number="line.debit" 
                  placeholder="Debit" 
                  class="w-full" 
                  mode="decimal" 
                  :min-fraction-digits="2" 
                  :max-fraction-digits="2"
                  @update:model-value="updateDebit(line)"
                />
              </div>
            </div>
            <div class="col-12 md:col-3">
              <div class="field">
                <InputNumber 
                  v-model.number="line.credit" 
                  placeholder="Credit" 
                  class="w-full" 
                  mode="decimal" 
                  :min-fraction-digits="2" 
                  :max-fraction-digits="2"
                  @update:model-value="updateCredit(line)"
                />
              </div>
            </div>
            <div class="col-12">
              <div class="field">
                <InputText 
                  v-model="line.memo" 
                  placeholder="Memo" 
                  class="w-full mt-2"
                />
              </div>
            </div>
            <div class="col-12 flex justify-content-end" v-if="!editingEntry">
              <Button 
                icon="pi pi-trash" 
                class="p-button-text p-button-danger" 
                @click="removeLine(index)" 
                :disabled="editedEntry.lines.length <= 2"
              />
            </div>
          </div>
        </div>

        <Button 
          v-if="!editingEntry"
          label="Add Line" 
          icon="pi pi-plus" 
          class="p-button-text" 
          @click="addLine" 
        />

        <Divider />

        <div class="grid">
          <div class="col-12 md:offset-6 md:col-6">
            <div class="grid">
              <div class="col-6 text-900 font-medium">Total Debit:</div>
              <div class="col-6 text-right">{{ formatCurrency(totalDebits) }}</div>
              
              <div class="col-6 text-900 font-medium">Total Credit:</div>
              <div class="col-6 text-right">{{ formatCurrency(totalCredits) }}</div>
              
              <div class="col-6 text-900 font-bold">Difference:</div>
              <div class="col-6 text-right font-bold" 
                  :class="{ 'text-green-500': isBalanced, 'text-red-500': !isBalanced }">
                {{ formatCurrency(Math.abs(totalDebits - totalCredits)) }}
                {{ totalDebits > totalCredits ? 'Dr' : 'Cr' }}
              </div>
            </div>
          </div>
        </div>
      </div>

      <template #footer>
        <div class="flex justify-content-end gap-2">
          <Button
            label="Cancel"
            severity="secondary"
            :disabled="loading"
            @click="closeDialog"
          />
          <Button
            label="Save"
            :loading="loading"
            @click="saveEntry"
            :disabled="!isBalanced || loading"
          />
        </div>
      </template>
    </Dialog>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue';
import { useToast } from 'primevue/usetoast';
import { useJournalEntryStore } from '../stores/journalEntryStore';
import type { JournalEntry as JournalEntryType, Account as AccountType } from '../types/accounting';

// Types
interface JournalEntryLine {
  id?: string;
  account_id: string | null;
  account_name?: string;
  debit: number;
  credit: number;
  memo: string;
}

// Extend the imported JournalEntryType with our local additions
interface LocalJournalEntry extends Omit<JournalEntryType, 'id'> {
  id?: string;
  lines: JournalEntryLine[];
  total_amount?: number;
  date: Date | string;
  status: string;
  reference: string;
  memo: string;
}

// Initialize services
const toast = useToast();
const journalEntryStore = useJournalEntryStore();

// Initialize with default values
const defaultEntry: Omit<LocalJournalEntry, 'id'> = {
  reference: '',
  date: new Date(),
  memo: '',
  status: 'draft',
  lines: [
    { account_id: null, account_name: '', debit: 0, credit: 0, memo: '' },
    { account_id: null, account_name: '', debit: 0, credit: 0, memo: '' }
  ],
  total_amount: 0
};

// State
const journalEntries = ref<LocalJournalEntry[]>([]);
const accounts = ref<AccountType[]>([]);
const loading = ref(false);
const journalDialog = ref(false);
const editingEntry = ref(false);
const editedEntry = ref<LocalJournalEntry>({ ...defaultEntry });
const statusOptions = [
  { label: 'Draft', value: 'draft' },
  { label: 'Posted', value: 'posted' },
  { label: 'Cancelled', value: 'cancelled' }
];

// Computed
const totalDebits = computed(() => {
  return editedEntry.value.lines.reduce((sum, line) => sum + (line.debit || 0), 0);
});

const totalCredits = computed(() => {
  return editedEntry.value.lines.reduce((sum, line) => sum + (line.credit || 0), 0);
});

const isBalanced = computed(() => {
  return Math.abs(totalDebits.value - totalCredits.value) < 0.01; // Allow for floating point precision
});

// Date handling utilities
const formatDate = (date: Date | string | null | undefined): string => {
  if (!date) return '';
  const d = new Date(date);
  return d.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
};

const toDate = (date: Date | string | null | undefined): Date => {
  return date ? new Date(date) : new Date();
};

const formatCurrency = (value: number | string | null | undefined): string => {
  if (value === null || value === undefined) return '$0.00';
  const num = typeof value === 'string' ? parseFloat(value) : value;
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(num || 0);
};

const getStatusSeverity = (status: string) => {
  switch (status?.toLowerCase()) {
    case 'posted':
      return 'success';
    case 'draft':
      return 'warning';
    case 'cancelled':
      return 'danger';
    default:
      return 'info';
  }
};

// Methods
const handleNewEntry = () => {
  editedEntry.value = { ...defaultEntry };
  editingEntry.value = false;
  journalDialog.value = true;
};

const editEntry = (entry: LocalJournalEntry) => {
  editedEntry.value = { ...entry };
  editingEntry.value = true;
  journalDialog.value = true;
};

const confirmDelete = async (entry: LocalJournalEntry) => {
  if (!entry.id) return;
  
  if (confirm('Are you sure you want to delete this journal entry?')) {
    try {
      loading.value = true;
      await journalEntryStore.deleteJournalEntry(entry.id);
      await loadJournalEntries();
      toast.add({ severity: 'success', summary: 'Success', detail: 'Journal entry deleted', life: 3000 });
    } catch (error) {
      console.error('Error deleting journal entry:', error);
      toast.add({ severity: 'error', summary: 'Error', detail: 'Failed to delete journal entry', life: 3000 });
    } finally {
      loading.value = false;
    }
  }
};

const loadJournalEntries = async () => {
  try {
    loading.value = true;
    const entries = await journalEntryStore.fetchJournalEntries();
    journalEntries.value = entries.map(entry => ({
      ...entry,
      date: new Date(entry.date)
    }));
  } catch (error) {
    console.error('Error loading journal entries:', error);
    toast.add({ severity: 'error', summary: 'Error', detail: 'Failed to load journal entries', life: 3000 });
  } finally {
    loading.value = false;
  }
};

// Lifecycle hooks
onMounted(() => {
  loadJournalEntries();
  fetchAccounts();
});

const addLine = () => {
  editedEntry.value.lines.push({
    account_id: null,
    account_name: '',
    debit: 0,
    credit: 0,
    memo: ''
  });
};

const removeLine = (index: number) => {
  if (editedEntry.value.lines.length > 2) {
    editedEntry.value.lines.splice(index, 1);
  }
};

const updateDebit = (line: JournalEntryLine) => {
  if (line.debit && line.debit > 0) {
    line.credit = 0;
  }
};

const updateCredit = (line: JournalEntryLine) => {
  if (line.credit && line.credit > 0) {
    line.debit = 0;
  }
};

const saveEntry = async () => {
  if (!isBalanced.value) {
    toast.add({ severity: 'error', summary: 'Validation Error', detail: 'Debits must equal credits', life: 3000 });
    return;
  }

  try {
    loading.value = true;
    
    // Prepare the entry data
    const entryData = {
      ...editedEntry.value,
      total_amount: totalDebits.value,
      lines: editedEntry.value.lines.map(line => ({
        ...line,
        amount: line.debit || -line.credit
      }))
    };

    if (editingEntry.value && editedEntry.value.id) {
      await journalEntryStore.updateJournalEntry(editedEntry.value.id, entryData);
      toast.add({ severity: 'success', summary: 'Success', detail: 'Journal entry updated', life: 3000 });
    } else {
      await journalEntryStore.createJournalEntry(entryData);
      toast.add({ severity: 'success', summary: 'Success', detail: 'Journal entry created', life: 3000 });
    }

    await loadJournalEntries();
    closeDialog();
  } catch (error) {
    console.error('Error saving journal entry:', error);
    toast.add({ severity: 'error', summary: 'Error', detail: 'Failed to save journal entry', life: 3000 });
  } finally {
    loading.value = false;
  }
};

const fetchAccounts = async () => {
  try {
    accounts.value = await journalEntryStore.fetchAccounts();
  } catch (error) {
    console.error('Error fetching accounts:', error);
    toast.add({ severity: 'error', summary: 'Error', detail: 'Failed to load accounts', life: 3000 });
  }
};

// Close dialog and reset editing state
const closeDialog = () => {
  journalDialog.value = false;
  setTimeout(() => {
    editedEntry.value = { ...defaultEntry };
    editingEntry.value = false;
  }, 300);
};
</script>

<style scoped>
.p-datatable-wrapper {
  overflow-x: auto;
}

:deep(.p-datatable) {
  min-width: 100%;
}

:deep(.p-datatable thead th) {
  white-space: nowrap;
}
</style>
