import { apiClient } from '@/services/apiClient';
import type {
  RecurringJournal,
  RecurringJournalCreate,
  RecurringJournalUpdate,
  RecurringJournalListParams,
  RecurringJournalListResponse,
  RecurringJournalPreview,
  RecurringJournalRunParams,
  RecurringJournalRunResponse,
  RecurringJournalOccurrence
} from '@/types/gl/recurringJournal';

const BASE_PATH = '/api/v1/gl/recurring';

export const recurringJournalService = {
  /**
   * Get a list of recurring journal entries
   */
  async getRecurringJournals(
    params?: RecurringJournalListParams
  ): Promise<RecurringJournalListResponse> {
    const response = await apiClient.get<RecurringJournalListResponse>(`${BASE_PATH}/journals`, { params });
    return response.data;
  },

  /**
   * Get a single recurring journal entry by ID
   */
  async getRecurringJournal(id: string): Promise<RecurringJournal> {
    const response = await apiClient.get<{ data: RecurringJournal }>(`${BASE_PATH}/journals/${id}`);
    return response.data.data;
  },

  /**
   * Create a new recurring journal entry
   */
  async createRecurringJournal(
    data: RecurringJournalCreate
  ): Promise<{ id: string }> {
    const response = await apiClient.post<{ id: string }>(
      `${BASE_PATH}/journals`,
      data
    );
    return response.data;
  },

  /**
   * Update an existing recurring journal entry
   */
  async updateRecurringJournal(
    id: string,
    data: RecurringJournalUpdate
  ): Promise<void> {
    await apiClient.patch(`${BASE_PATH}/journals/${id}`, data);
  },

  /**
   * Delete a recurring journal entry
   */
  async deleteRecurringJournal(id: string): Promise<void> {
    await apiClient.delete(`${BASE_PATH}/journals/${id}`);
  },

  /**
   * Update the status of a recurring journal entry
   */
  async updateRecurringJournalStatus(
    id: string,
    status: 'active' | 'paused' | 'completed' | 'cancelled'
  ): Promise<void> {
    await apiClient.patch(`${BASE_PATH}/journals/${id}/status`, { status });
  },

  /**
   * Get a preview of the next occurrences of a recurring journal entry
   */
  async getRecurringJournalPreview(
    data: Omit<RecurringJournalCreate, 'name' | 'description' | 'company_id'>
  ): Promise<RecurringJournalPreview> {
    const response = await apiClient.post<{ data: RecurringJournalPreview }>(
      `${BASE_PATH}/journals/preview`,
      data
    );
    return response.data.data;
  },

  /**
   * Manually trigger a run of a recurring journal entry
   */
  async runRecurringJournal(
    id: string,
    params: RecurringJournalRunParams = {}
  ): Promise<RecurringJournalRunResponse> {
    const response = await apiClient.post<{ data: RecurringJournalRunResponse }>(
      `${BASE_PATH}/journals/${id}/run`,
      params
    );
    return response.data.data;
  },

  /**
   * Get a list of past occurrences of a recurring journal entry
   */
  async getRecurringJournalOccurrences(
    id: string,
    params?: { limit?: number; offset?: number }
  ): Promise<{ data: RecurringJournalOccurrence[]; total: number }> {
    const response = await apiClient.get<{
      data: RecurringJournalOccurrence[];
      total: number;
    }>(`${BASE_PATH}/journals/${id}/occurrences`, { params });
    return response.data;
  },

  /**
   * Get the journal entries generated by a specific occurrence
   */
  async getOccurrenceJournalEntries(
    occurrenceId: string,
    params?: { limit?: number; offset?: number }
  ): Promise<{ data: any[]; total: number }> {
    const response = await apiClient.get<{ data: any[]; total: number }>(
      `${BASE_PATH}/occurrences/${occurrenceId}/journal-entries`,
      { params }
    );
    return response.data;
  },

  /**
   * Get a list of upcoming due recurring journal entries
   */
  async getUpcomingRecurringJournals(
    params?: { days_ahead?: number }
  ): Promise<RecurringJournalListResponse> {
    const response = await apiClient.get<RecurringJournalListResponse>(
      `${BASE_PATH}/journals/upcoming`,
      { params }
    );
    return response.data;
  },

  /**
   * Get statistics about recurring journal entries
   */
  async getRecurringJournalStats(): Promise<{
    active: number;
    paused: number;
    completed: number;
    cancelled: number;
    next_run: string | null;
    last_run: string | null;
  }> {
    const response = await apiClient.get<{ data: any }>(
      `${BASE_PATH}/journals/stats`
    );
    return response.data.data;
  },
};
