import { apiClient } from '@/services/apiClient';
import type {
  AllocationRule,
  AllocationRuleCreate,
  AllocationRuleUpdate,
  AllocationRuleListParams,
  AllocationRuleListResponse,
  AllocationDestination,
  AllocationDestinationCreate,
  AllocationDestinationUpdate,
  AllocationPreview,
  AllocationRunParams,
  AllocationRunResponse
} from '@/types/gl/allocationRule';

const BASE_PATH = '/api/v1/gl/allocations';

export const allocationRuleService = {
  /**
   * Get a list of allocation rules
   */
  async getAllocationRules(
    params?: AllocationRuleListParams
  ): Promise<AllocationRuleListResponse> {
    const response = await apiClient.get<AllocationRuleListResponse>(`${BASE_PATH}/rules`, { params });
    return response.data;
  },

  /**
   * Get a single allocation rule by ID
   */
  async getAllocationRule(id: string): Promise<AllocationRule> {
    const response = await apiClient.get<{ data: AllocationRule }>(`${BASE_PATH}/rules/${id}`);
    return response.data.data;
  },

  /**
   * Create a new allocation rule
   */
  async createAllocationRule(
    data: AllocationRuleCreate
  ): Promise<{ id: string }> {
    const response = await apiClient.post<{ id: string }>(
      `${BASE_PATH}/rules`,
      data
    );
    return response.data;
  },

  /**
   * Update an existing allocation rule
   */
  async updateAllocationRule(
    id: string,
    data: AllocationRuleUpdate
  ): Promise<void> {
    await apiClient.patch(`${BASE_PATH}/rules/${id}`, data);
  },

  /**
   * Delete an allocation rule
   */
  async deleteAllocationRule(id: string): Promise<void> {
    await apiClient.delete(`${BASE_PATH}/rules/${id}`);
  },

  /**
   * Toggle the active status of an allocation rule
   */
  async toggleAllocationRuleStatus(
    id: string,
    isActive: boolean
  ): Promise<void> {
    await apiClient.patch(`${BASE_PATH}/rules/${id}/status`, { is_active: isActive });
  },

  /**
   * Get destinations for an allocation rule
   */
  async getAllocationRuleDestinations(
    ruleId: string
  ): Promise<AllocationDestination[]> {
    const response = await apiClient.get<{ data: AllocationDestination[] }>(
      `${BASE_PATH}/rules/${ruleId}/destinations`
    );
    return response.data.data;
  },

  /**
   * Add a destination to an allocation rule
   */
  async addAllocationRuleDestination(
    ruleId: string,
    data: AllocationDestinationCreate
  ): Promise<{ id: string }> {
    const response = await apiClient.post<{ id: string }>(
      `${BASE_PATH}/rules/${ruleId}/destinations`,
      data
    );
    return response.data;
  },

  /**
   * Update an allocation rule destination
   */
  async updateAllocationRuleDestination(
    ruleId: string,
    destinationId: string,
    data: AllocationDestinationUpdate
  ): Promise<void> {
    await apiClient.patch(
      `${BASE_PATH}/rules/${ruleId}/destinations/${destinationId}`,
      data
    );
  },

  /**
   * Remove a destination from an allocation rule
   */
  async removeAllocationRuleDestination(
    ruleId: string,
    destinationId: string
  ): Promise<void> {
    await apiClient.delete(
      `${BASE_PATH}/rules/${ruleId}/destinations/${destinationId}`
    );
  },

  /**
   * Reorder destinations in an allocation rule
   */
  async reorderAllocationRuleDestinations(
    ruleId: string,
    destinationIds: string[]
  ): Promise<void> {
    await apiClient.patch(
      `${BASE_PATH}/rules/${ruleId}/destinations/reorder`,
      { destination_ids: destinationIds }
    );
  },

  /**
   * Get a preview of an allocation
   */
  async getAllocationPreview(
    ruleId: string,
    params: { source_account_id: string; amount: number; date: string }
  ): Promise<AllocationPreview> {
    const response = await apiClient.post<{ data: AllocationPreview }>(
      `${BASE_PATH}/rules/${ruleId}/preview`,
      params
    );
    return response.data.data;
  },

  /**
   * Manually run an allocation rule
   */
  async runAllocationRule(
    ruleId: string,
    params: AllocationRunParams
  ): Promise<AllocationRunResponse> {
    const response = await apiClient.post<{ data: AllocationRunResponse }>(
      `${BASE_PATH}/rules/${ruleId}/run`,
      params
    );
    return response.data.data;
  },

  /**
   * Get a list of past allocation runs
   */
  async getAllocationRuleRuns(
    ruleId: string,
    params?: { limit?: number; offset?: number; status?: string }
  ): Promise<{ data: any[]; total: number }> {
    const response = await apiClient.get<{ data: any[]; total: number }>(
      `${BASE_PATH}/rules/${ruleId}/runs`,
      { params }
    );
    return response.data;
  },

  /**
   * Get details of a specific allocation run
   */
  async getAllocationRuleRun(
    ruleId: string,
    runId: string
  ): Promise<{ data: any }> {
    const response = await apiClient.get<{ data: any }>(
      `${BASE_PATH}/rules/${ruleId}/runs/${runId}`
    );
    return response.data;
  },

  /**
   * Get journal entries generated by an allocation run
   */
  async getAllocationRuleRunJournalEntries(
    ruleId: string,
    runId: string,
    params?: { limit?: number; offset?: number }
  ): Promise<{ data: any[]; total: number }> {
    const response = await apiClient.get<{ data: any[]; total: number }>(
      `${BASE_PATH}/rules/${ruleId}/runs/${runId}/journal-entries`,
      { params }
    );
    return response.data;
  },

  /**
   * Get statistics about allocation rules
   */
  async getAllocationRuleStats(): Promise<{
    total_rules: number;
    active_rules: number;
    last_run: string | null;
    total_allocated: number;
    total_runs: number;
  }> {
    const response = await apiClient.get<{ data: any }>(
      `${BASE_PATH}/rules/stats`
    );
    return response.data.data;
  },
};
