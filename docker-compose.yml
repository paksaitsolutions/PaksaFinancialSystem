services:
  postgres:
    image: postgres:15-alpine
    container_name: paksa-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-paksa_financial}
      POSTGRES_USER: ${POSTGRES_USER:-paksa_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - paksa-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: paksa-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - paksa-network
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paksa-backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-paksa_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-paksa_financial}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    ports:
      - "8000:8000"
    networks:
      - paksa-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: paksa-frontend
    environment:
      - VITE_API_BASE_URL=http://backend:8000
    ports:
      - "3000:80"
    networks:
      - paksa-network
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: paksa-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - paksa-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  paksa-network:
    driver: bridge