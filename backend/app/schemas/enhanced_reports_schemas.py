"""
Schemas for enhanced reports operations.
"""
from datetime import datetime
from typing import Optional, List, Dict, Any
from uuid import UUID

from pydantic import BaseModel, Field


class ReportGenerationRequest(BaseModel):
    """Schema for report generation request."""
    company_id: UUID = Field(..., description="Company ID")
    report_type: str = Field(..., description="Report type")
    period_start: datetime = Field(..., description="Period start date")
    period_end: datetime = Field(..., description="Period end date")
    filters: Optional[Dict[str, Any]] = Field(None, description="Report filters")


class CompanyReportResponse(BaseModel):
    """Schema for company report response."""
    id: UUID = Field(..., description="Report ID")
    company_id: UUID = Field(..., description="Company ID")
    report_name: str = Field(..., description="Report name")
    report_type: str = Field(..., description="Report type")
    period_start: datetime = Field(..., description="Period start date")
    period_end: datetime = Field(..., description="Period end date")
    filters: Optional[Dict[str, Any]] = Field(None, description="Report filters")
    status: str = Field(..., description="Report status")
    generated_at: Optional[datetime] = Field(None, description="Generation timestamp")
    file_path: Optional[str] = Field(None, description="File path")
    file_format: Optional[str] = Field(None, description="File format")
    report_data: Optional[Dict[str, Any]] = Field(None, description="Report data")
    generated_by: UUID = Field(..., description="Generated by user ID")
    description: Optional[str] = Field(None, description="Report description")
    created_at: datetime = Field(..., description="Creation timestamp")

    class Config:
        orm_mode = True


class ReportTemplateRequest(BaseModel):
    """Schema for report template creation."""
    template_name: str = Field(..., description="Template name")
    report_type: str = Field(..., description="Report type")
    template_config: Dict[str, Any] = Field(..., description="Template configuration")
    is_default: bool = Field(False, description="Is default template")


class ReportTemplateResponse(BaseModel):
    """Schema for report template response."""
    id: UUID = Field(..., description="Template ID")
    company_id: UUID = Field(..., description="Company ID")
    template_name: str = Field(..., description="Template name")
    report_type: str = Field(..., description="Report type")
    template_config: Dict[str, Any] = Field(..., description="Template configuration")
    is_default: bool = Field(..., description="Is default template")
    is_active: bool = Field(..., description="Is active")
    created_at: datetime = Field(..., description="Creation timestamp")

    class Config:
        orm_mode = True


class ReportScheduleRequest(BaseModel):
    """Schema for report schedule creation."""
    schedule_name: str = Field(..., description="Schedule name")
    report_type: str = Field(..., description="Report type")
    cron_expression: str = Field(..., description="Cron expression")
    report_config: Optional[Dict[str, Any]] = Field(None, description="Report configuration")
    email_recipients: Optional[List[str]] = Field(None, description="Email recipients")


class ReportScheduleResponse(BaseModel):
    """Schema for report schedule response."""
    id: UUID = Field(..., description="Schedule ID")
    company_id: UUID = Field(..., description="Company ID")
    schedule_name: str = Field(..., description="Schedule name")
    report_type: str = Field(..., description="Report type")
    cron_expression: str = Field(..., description="Cron expression")
    is_active: bool = Field(..., description="Is active")
    report_config: Optional[Dict[str, Any]] = Field(None, description="Report configuration")
    email_recipients: Optional[List[str]] = Field(None, description="Email recipients")
    last_run: Optional[datetime] = Field(None, description="Last run timestamp")
    next_run: Optional[datetime] = Field(None, description="Next run timestamp")
    created_at: datetime = Field(..., description="Creation timestamp")

    class Config:
        orm_mode = True


class IncomeStatementRequest(BaseModel):
    """Schema for income statement generation."""
    period_start: datetime = Field(..., description="Period start date")
    period_end: datetime = Field(..., description="Period end date")


class BalanceSheetRequest(BaseModel):
    """Schema for balance sheet generation."""
    as_of_date: datetime = Field(..., description="As of date")


class AgingReportRequest(BaseModel):
    """Schema for aging report generation."""
    aging_type: str = Field(..., description="Aging type (payables/receivables)")
    as_of_date: datetime = Field(..., description="As of date")


class AuditReportRequest(BaseModel):
    """Schema for audit report generation."""
    period_start: datetime = Field(..., description="Period start date")
    period_end: datetime = Field(..., description="Period end date")